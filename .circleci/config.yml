version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install-kubectl:
    description: Install Kubectl
    steps:
      - run:
          name: Install Kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            export PATH=$PATH:/usr/local/bin/kubectl

jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.devops
            source ~/.devops/bin/activate
            make install
      - run:
          name: run lint
          command: |
            source ~/.devops/bin/activate
            make lint

  docker-build-and-upload-to-dockerhub:
    docker:
      - image: circleci/golang:1.15
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.17
          docker_layer_caching: true
      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            # verify docker build
            docker image ls
      - run:
          name: Upload Docker image to Dockerhub
          command: |
            export DOCKER_PATH=$DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKER_PATH
            docker push $DOCKER_PATH

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/network-params.json

      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/cluster-params.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m

      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/nodegroup-params.json \
              --capabilities CAPABILITY_NAMED_IAM

      - run:
          name: Ensure management instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/management.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/management-params.json \
              --output text >> ~/project/ansible/checkIfDeployed.txt
            cat ~/project/ansible/checkIfDeployed.txt

      - run:
          name: Extract the IPs of the management instances for Ansible
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/checkIfDeployed.txt
            - project/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install-kubectl
      - add_ssh_keys:
          fingerprints: [fe:98:81:45:ca:bc:c4:99:3a:37:3e:e9:7c:54:fa:9e]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            echo [management] > ~/project/ansible/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
              --output text >> ~/project/ansible/inventory.txt
            cat ~/project/ansible/inventory.txt
            ansible-playbook -i ~/project/ansible/inventory.txt -v ~/project/ansible/configure-server.yml

  configure-cluster:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install-kubectl
      - add_ssh_keys:
          fingerprints: [fe:98:81:45:ca:bc:c4:99:3a:37:3e:e9:7c:54:fa:9e]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |        
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/configure-cluster.yml -v
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            cat ~/project/ansible/inventory.txt
            echo "Wait 60 seconds..."
            sleep 60
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/save-elb-dns.yml -v
            cat ~/project/ansible/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/ansible/elb_dns.txt

  deploy-docker:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: [31:30:44:3f:d4:92:b1:68:4f:0d:a9:66:b4:ec:40:5a]
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy newest Docker Image
          command: |
            cat ~/project/ansible/inventory.txt
            cd ansible
            ansible-playbook -i ~/project/ansible/inventory.txt ~/project/ansible/deploy-app.yml -v
          no_output_timeout: 2m


workflows:
  default:
    jobs:
      - test-build
      - docker-build-and-upload-to-dockerhub:
          filters:
            branches:
              only: [ master ]
      - deploy-infrastructure:
          filters:
            branches:
              only: [ master ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - configure-cluster:
          requires:
            - configure-infrastructure
            - docker-build-and-upload-to-dockerhub
      - deploy-docker:
            requires:
              - configure-cluster
      
